from talon import talon_label_reads as tlr
import optparse_mock
import os
import pytest
import pysam
import pandas as pd

#class OptParseMock(object):
#     """Class to mimic option parser for talon_label_reads.py"""
#     def __init__(self, sam_file, genome_file, threads = 2, fracA_range_size = 10,
#                  tmp_dir = "tmp_label_reads", delete_tmp = False,
#                  outprefix = "talon_prelabels"):
#         self.sam_file = sam_file
#         self.genome_file = genome_file
#         self.threads = threads
#         self.fracA_range_size = fracA_range_size
#         self.tmp_dir = tmp_dir
#         self.delete_tmp = delete_tmp
#         self.outprefix = outprefix

def test_run_chrom_thread():
    """ There is already a test to look at the correctness of 
        compute_frac_as_after_transcript, so the purpose of this test is to make
        sure that the expected output files are generated by run_chrom_thread
        and that the provided options are handled correctly """

    sam_file = "talon_label_reads/test_inputs/plus_strand_read.sam"
    genome_file = "talon_label_reads/test_inputs/toy_genome.fa"
    tmp_dir = "scratch/test_run_chrom_thread"
    options = optparse_mock.OptParseMock(sam_file, genome_file, 
                           tmp_dir = tmp_dir)

    tlr.run_chrom_thread(sam_file, options)

    # Check existence of outfiles
    processed_sam = tmp_dir + "/labeled/plus_strand_read.sam"
    outlog_file = tmp_dir + "/labeled/plus_strand_read_read_labels.tsv"
    assert os.path.isfile(processed_sam)
    assert os.path.isfile(outlog_file)

    # Check content of output files
    with pysam.AlignmentFile(processed_sam) as sam:
        for record in sam:
            try:
                fraction_As = record.get_tag("fA")
            except:
                pytest.fail("Could not find fA tag in read")

    outlog = pd.read_csv(outlog_file, sep = "\t", header = None)
    assert len(outlog.columns) == 2
    assert len(outlog) == 1

